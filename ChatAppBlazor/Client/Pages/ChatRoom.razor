@page "/Chatroom"
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.SignalR.Client;

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput = "";
    private string messageInput = "";

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5261/Chathub")  // This URL should match the server configuration
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            Console.WriteLine($"Received message from {user}: {message}"); // Add this
            messages.Add($"{user}: {message}");
            StateHasChanged(); // Request UI refresh
         });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        if (hubConnection.State != HubConnectionState.Connected)
        {
            Console.WriteLine("Can't send a message, connection is not active.");
            return;
        }

        if (!string.IsNullOrEmpty(messageInput) && !string.IsNullOrEmpty(userInput))
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
{
    if (hubConnection != null && hubConnection.State == HubConnectionState.Connected)
    {
        await hubConnection.StopAsync();
    }
}
}

<div>
    <input @bind="userInput" placeholder="Name..." />
    <input @bind="messageInput" placeholder="Message..." />
    <button @onclick="Send">Send</button>
    <hr />

    <ul>
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
</div>